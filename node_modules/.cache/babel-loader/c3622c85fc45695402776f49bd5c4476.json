{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nlet timer; // for holding timer function for auto logout if session expire\n\nexport default {\n  async login(context, payload) {\n    return context.dispatch(\"auth\", { ...payload\n    });\n  },\n\n  async auth(context, payload) {\n    //const token = context.rootGetters.token; //User token !!\n    const baseUrl = localStorage.getItem(\"_rootRestUrl\");\n    const response = await fetch(baseUrl + \"/api/v1/Auth/LogIn\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: payload.username,\n        password: payload.password,\n        sessionId: ''\n      })\n    });\n    /* if (response.status==404) {  \r\n        \r\n         alert(\"Wrong username or password!\");\r\n        // parent.isLoading = false;\r\n     }*/\n\n    if (response.status != 200) {\n      const responseData2 = await response.text(); // console.log(responseData);\n\n      const error = new Error(responseData2);\n      throw error;\n    }\n\n    const responseData = await response.json(); //expecting in json recive 'exipresIn' in minutes! how long will session exists\n    //const expiresIn = responseData.validFor * 1000 * 60;\n\n    const expiresIn = 60 * 1000 * 60; //auto logout if token expires\n\n    timer = setTimeout(function () {\n      context.dispatch(\"autoLogout\");\n    }, expiresIn); //store login details in local storeage so that on refresh page app remember loged user!\n\n    localStorage.setItem(\"token\", responseData.sessionId);\n    localStorage.setItem(\"userId\", responseData.id);\n    localStorage.setItem(\"tokenExpiration\", responseData.expireDate);\n    localStorage.setItem(\"userFullname\", responseData.name + \" \" + responseData.surname);\n    localStorage.setItem(\"userType\", responseData.type); //data needed from login json:\n    //localStorage.setItem('userFullname',payload.username);\n\n    localStorage.setItem(\"expiresIn\", expiresIn);\n    context.commit(\"setUser\", {\n      token: responseData.sessionId,\n      userId: responseData.userId,\n      userFullname: responseData.name + \" \" + responseData.surname,\n      userType: responseData.type\n    });\n  },\n\n  logout(context) {\n    const thistoken = localStorage.getItem(\"token\"); // needed for logout\n\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"userFullname\");\n    localStorage.removeItem(\"userType\");\n    localStorage.removeItem(\"tokenExpiration\");\n    localStorage.removeItem(\"expiresIn\");\n    clearTimeout(timer);\n    context.commit(\"setUser\", {\n      token: null,\n      userId: null,\n      userFullname: null,\n      userType: null,\n      tokenExpiration: null\n    }); //send logout request :\n\n    const baseUrl = localStorage.getItem(\"_rootRestUrl\");\n    fetch(baseUrl + \"/api/v1/Auth/LogOut\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: '',\n        password: '',\n        sessionId: thistoken\n      })\n    }); // ------------\n\n    this.$router.push('/');\n  },\n\n  //try to login if local storage containt login details\n  autoLogin(context) {\n    const token = localStorage.getItem(\"token\");\n    const userId = localStorage.getItem(\"userId\");\n    const userFullname = localStorage.getItem(\"userFullname\");\n    const userType = localStorage.getItem(\"userType\");\n    const tokenExpiration = localStorage.getItem(\"tokenExpiration\");\n    const willExpire = +tokenExpiration - new Date().getTime();\n    const expiresIn = localStorage.getItem(\"expiresIn\");\n\n    if (willExpire < 0) {\n      //if token expires do nothing\n      return;\n    } // alert(\"token ok\")\n    //if is token ok then we must extend life of the token for the next expiration time\n\n\n    const expirationDate = new Date().getTime() + expiresIn;\n    localStorage.setItem(\"tokenExpiration\", expirationDate); //set new timer\n\n    timer = setTimeout(function () {\n      context.dispatch(\"autoLogout\");\n    }, expiresIn); //login \"again\" this user\n\n    if (token && userId && userFullname) {\n      context.commit(\"setUser\", {\n        token: token,\n        userId: userId,\n        userFullname: userFullname,\n        userType: userType\n      });\n    }\n  },\n\n  autoLogout(context) {\n    context.dispatch(\"logout\");\n    context.commit(\"setAutoLogout\");\n    this.$router.push('/');\n  }\n\n};","map":{"version":3,"names":["timer","login","context","payload","dispatch","auth","baseUrl","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","email","username","password","sessionId","status","responseData2","text","error","Error","responseData","json","expiresIn","setTimeout","setItem","id","expireDate","name","surname","type","commit","token","userId","userFullname","userType","logout","thistoken","removeItem","clearTimeout","tokenExpiration","$router","push","autoLogin","willExpire","Date","getTime","expirationDate","autoLogout"],"sources":["Q:/Projects/Transport-web-/src/store/modules/auth/actions.js"],"sourcesContent":["let timer; // for holding timer function for auto logout if session expire\r\n\r\n\r\n\r\nexport default {\r\n  async login(context, payload) {\r\n    return context.dispatch(\"auth\", {\r\n      ...payload,\r\n    });\r\n  },\r\n\r\n  async auth(context, payload) {\r\n    //const token = context.rootGetters.token; //User token !!\r\n\r\n    const baseUrl = localStorage.getItem(\"_rootRestUrl\");\r\n    const response = await fetch(baseUrl+\"/api/v1/Auth/LogIn\", {\r\n      method: \"POST\",\r\n\r\n      headers: {\r\n        \"Content-Type\":\"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        email: payload.username,\r\n        password: payload.password,\r\n        sessionId: '',\r\n      }),\r\n    });\r\n\r\n   /* if (response.status==404) {  \r\n       \r\n        alert(\"Wrong username or password!\");\r\n       // parent.isLoading = false;\r\n    }*/\r\n    if (response.status!=200) {\r\n       const responseData2 = await response.text();\r\n\r\n        // console.log(responseData);\r\n        const error = new Error(\r\n            responseData2\r\n        );\r\n        throw error;\r\n      }\r\n\r\n\r\n\r\n    const responseData = await response.json();\r\n\r\n\r\n    //expecting in json recive 'exipresIn' in minutes! how long will session exists\r\n    //const expiresIn = responseData.validFor * 1000 * 60;\r\n    const expiresIn = 60 * 1000 * 60;\r\n\r\n    //auto logout if token expires\r\n    timer = setTimeout(function () {\r\n      context.dispatch(\"autoLogout\");\r\n    }, expiresIn);\r\n\r\n    //store login details in local storeage so that on refresh page app remember loged user!\r\n\r\n    localStorage.setItem(\"token\", responseData.sessionId);\r\n    localStorage.setItem(\"userId\", responseData.id);\r\n    localStorage.setItem(\"tokenExpiration\", responseData.expireDate);\r\n    localStorage.setItem(\"userFullname\",responseData.name+\" \"+responseData.surname);\r\n    localStorage.setItem(\"userType\",responseData.type);\r\n    //data needed from login json:\r\n\r\n    //localStorage.setItem('userFullname',payload.username);\r\n\r\n    localStorage.setItem(\"expiresIn\", expiresIn);\r\n\r\n    context.commit(\"setUser\", {\r\n      token: responseData.sessionId,\r\n      userId: responseData.userId,\r\n      userFullname: responseData.name+\" \"+responseData.surname,\r\n      userType: responseData.type\r\n    });\r\n  },\r\n\r\n  logout(context) {\r\n    const thistoken = localStorage.getItem(\"token\"); // needed for logout\r\n   \r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"userId\");\r\n    localStorage.removeItem(\"userFullname\");\r\n    localStorage.removeItem(\"userType\");\r\n    localStorage.removeItem(\"tokenExpiration\");\r\n    localStorage.removeItem(\"expiresIn\");\r\n    \r\n    \r\n    clearTimeout(timer);\r\n\r\n    context.commit(\"setUser\", {\r\n      token: null,\r\n      userId: null,\r\n      userFullname: null,\r\n      userType: null,\r\n      tokenExpiration: null,\r\n    });\r\n\r\n    //send logout request :\r\n        const baseUrl = localStorage.getItem(\"_rootRestUrl\");\r\n       \r\n              \r\n        fetch(baseUrl+\"/api/v1/Auth/LogOut\", {\r\n          method: \"POST\",\r\n\r\n          headers: {\r\n            \"Content-Type\":\"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            email: '',\r\n            password: '',\r\n            sessionId: thistoken,\r\n          }),\r\n        });\r\n\r\n\r\n        \r\n\r\n    // ------------\r\n    \r\n    this.$router.push('/'); \r\n\r\n\r\n  },\r\n\r\n  //try to login if local storage containt login details\r\n  autoLogin(context) {\r\n\r\n   \r\n    const token = localStorage.getItem(\"token\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const userFullname = localStorage.getItem(\"userFullname\");\r\n    const userType = localStorage.getItem(\"userType\");\r\n    const tokenExpiration = localStorage.getItem(\"tokenExpiration\");\r\n    const willExpire = +tokenExpiration - new Date().getTime();\r\n    const expiresIn = localStorage.getItem(\"expiresIn\");\r\n\r\n   \r\n\r\n    if (willExpire < 0) {\r\n      //if token expires do nothing\r\n      return;\r\n    }\r\n\r\n   // alert(\"token ok\")\r\n\r\n    //if is token ok then we must extend life of the token for the next expiration time\r\n\r\n    const expirationDate = new Date().getTime() + expiresIn;\r\n    localStorage.setItem(\"tokenExpiration\", expirationDate);\r\n\r\n    //set new timer\r\n    timer = setTimeout(function () {\r\n      context.dispatch(\"autoLogout\");\r\n    }, expiresIn);\r\n\r\n    //login \"again\" this user\r\n    if (token && userId && userFullname) {\r\n      context.commit(\"setUser\", {\r\n        token: token,\r\n        userId: userId,\r\n        userFullname: userFullname,\r\n        userType: userType,\r\n      });\r\n    }\r\n  },\r\n  autoLogout(context) {\r\n    context.dispatch(\"logout\");\r\n    context.commit(\"setAutoLogout\");\r\n    this.$router.push('/');\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}