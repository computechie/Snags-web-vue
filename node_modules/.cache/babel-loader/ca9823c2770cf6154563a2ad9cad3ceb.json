{"ast":null,"code":"import { renderSlot as _renderSlot, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"vue-zoomer\",\n    style: _normalizeStyle({\n      backgroundColor: $props.backgroundColor\n    }),\n    onMousewheel: _cache[0] || (_cache[0] = (...args) => $options.onMouseWheel && $options.onMouseWheel(...args)),\n    \"on:DOMMouseScroll\": _cache[1] || (_cache[1] = (...args) => $options.onMouseWheel && $options.onMouseWheel(...args)),\n    onMousedown: _cache[2] || (_cache[2] = (...args) => $options.onMouseDown && $options.onMouseDown(...args)),\n    onMouseup: _cache[3] || (_cache[3] = (...args) => $options.onMouseUp && $options.onMouseUp(...args)),\n    onMousemove: _cache[4] || (_cache[4] = (...args) => $options.onMouseMove && $options.onMouseMove(...args)),\n    onMouseout: _cache[5] || (_cache[5] = (...args) => $options.setPointerPosCenter && $options.setPointerPosCenter(...args)),\n    onTouchstart: _cache[6] || (_cache[6] = (...args) => $options.onTouchStart && $options.onTouchStart(...args)),\n    onTouchend: _cache[7] || (_cache[7] = (...args) => $options.onTouchEnd && $options.onTouchEnd(...args)),\n    onTouchmove: _cache[8] || (_cache[8] = (...args) => $options.onTouchMove && $options.onTouchMove(...args))\n  }, [_createElementVNode(\"div\", {\n    class: \"zoomer\",\n    style: _normalizeStyle($options.wrapperStyle)\n  }, [_renderSlot(_ctx.$slots, \"default\", {}, undefined, true)], 4\n  /* STYLE */\n  )], 36\n  /* STYLE, HYDRATE_EVENTS */\n  );\n}","map":{"version":3,"mappings":";;uBAEEA,oBAgBM,KAhBN,EAgBM;IAfJC,KAAK,EAAC,YAeF;IAdHC,KAAK;MAAAC,iBAAoBC;IAApB,EAcF;IAbHC,YAAU,yCAAEC,uDAAF,CAaP;IAZH,qBAAcC,uCAAED,uDAAF,CAYX;IAXHE,WAAS,yCAAEF,qDAAF,CAWN;IAVHG,SAAO,yCAAEH,iDAAF,CAUJ;IATHI,WAAS,yCAAEJ,qDAAF,CASN;IARHK,UAAQ,yCAAEL,qEAAF,CAQL;IAPHM,YAAU,yCAAEN,uDAAF,CAOP;IANHO,UAAQ,yCAAEP,mDAAF,CAML;IALHQ,WAAS,yCAAER,qDAAF;EAKN,CAhBN,GAaES,oBAEM,KAFN,EAEM;IAFDd,KAAK,EAAC,QAEL;IAFeC,KAAK,kBAAEI,qBAAF;EAEpB,CAFN,GACEU,YAAaC,WAAb,EAAa,SAAb,EAAa,EAAb,EAAaC,SAAb,EAAa,IAAb,EADF;;EAAA,EAbF;;EAAA","names":["_createElementBlock","class","style","backgroundColor","$props","onMousewheel","$options","_cache","onMousedown","onMouseup","onMousemove","onMouseout","onTouchstart","onTouchend","onTouchmove","_createElementVNode","_renderSlot","_ctx","undefined"],"sourceRoot":"","sources":["Q:\\Projects\\Transport-web\\node_modules\\vue-zoomer\\src\\vue-zoomer.vue"],"sourcesContent":["<!-- vue-zoomer: https://github.com/jarvisniu/vue-zoomer -->\n<template>\n  <div\n    class=\"vue-zoomer\"\n    :style=\"{backgroundColor: backgroundColor}\"\n    @mousewheel=\"onMouseWheel\"\n    @DOMMouseScroll=\"onMouseWheel\"\n    @mousedown=\"onMouseDown\"\n    @mouseup=\"onMouseUp\"\n    @mousemove=\"onMouseMove\"\n    @mouseout=\"setPointerPosCenter\"\n    @touchstart=\"onTouchStart\"\n    @touchend=\"onTouchEnd\"\n    @touchmove=\"onTouchMove\"\n  >\n    <div class=\"zoomer\" :style=\"wrapperStyle\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport _debounce from './debounce.min.js'\n\nimport TapDetector from './TapDetector'\n\nexport default {\n  props: {\n    minScale: { type: Number, default: 1 },\n    maxScale: { type: Number, default: 5 },\n    zoomed: { type: Boolean, default: false },\n    resetTrigger: { type: Number, default: 1e5 },\n    aspectRatio: { type: Number, default: 1 },\n    backgroundColor: { type: String, default: 'transparent' },\n    pivot: { type: String, default: 'cursor' }, // other options: image-center\n    zoomingElastic: { type: Boolean, default: true },\n    limitTranslation: { type: Boolean, default: true },\n    doubleClickToZoom: { type: Boolean, default: true },\n    mouseWheelToZoom: { type: Boolean, default: true },\n  },\n  data () {\n    return {\n      // Container sizes, used to determin the initial zoomer size.\n      // Need to reactive to window resizing.\n      containerWidth: 1,\n      containerHeight: 1,\n      containerLeft: 0,\n      containerTop: 0,\n      // Store values: Interactions will at last change these values.\n      // After rotation or resize, these values will keep still.\n      // These three values are all relative to the container size.\n      translateX: 0,\n      animTranslateX: 0,\n      translateY: 0,\n      animTranslateY: 0,\n      scale: 1,\n      animScale: 1,\n      // Mouse states\n      lastFullWheelTime: 0,\n      lastWheelTime: 0,\n      lastWheelDirection: 'y',\n      isPointerDown: false,\n      pointerPosX: -1,\n      pointerPosY: -1,\n      twoFingerInitDist: 0,\n      panLocked: true,\n      // Others\n      raf: null,\n      tapDetector: null,\n    }\n  },\n  computed: {\n    wrapperStyle () {\n      let translateX = this.containerWidth * this.animTranslateX\n      let translateY = this.containerHeight * this.animTranslateY\n      return {\n        transform: [\n          `translate(${ translateX }px, ${ translateY }px)`,\n          `scale(${ this.animScale })`,\n        ].join(' ')\n      }\n    },\n  },\n  watch: {\n    scale (val) {\n      if (val !== 1) {\n        this.$emit('update:zoomed', true)\n        this.panLocked = false\n      }\n    },\n    resetTrigger: 'reset',\n  },\n  mounted () {\n    this.tapDetector = new TapDetector()\n    this.tapDetector.attach(this.$el)\n    if (this.doubleClickToZoom) {\n      this.tapDetector.onDoubleTap(this.onDoubleTap)\n    }\n    // console.log('container size: ', this.containerWidth, this.containerHeight)\n    window.addEventListener('resize', this.onWindowResize)\n    this.onWindowResize()\n    this.refreshContainerPos()\n    this.loop()\n  },\n  destroyed () {\n    this.tapDetector.detach(this.$el)\n    window.removeEventListener('resize', this.onWindowResize)\n    window.cancelAnimationFrame(this.raf)\n    // console.log('destroy')\n  },\n  methods: {\n    // API ---------------------------------------------------------------------\n    reset () {\n      this.scale = 1\n      this.panLocked = true\n      this.translateX = 0\n      this.translateY = 0\n    },\n    zoomIn(scale = 2) {\n      this.tryToScale(scale)\n      this.onInteractionEnd()\n    },\n    zoomOut(scale = 0.5) {\n      this.tryToScale(scale)\n      this.onInteractionEnd()\n    },\n    // Main Logic --------------------------------------------------------------\n    // scale\n    // Zoom the image with the point at the pointer(mouse or pinch center) pinned.\n    // Simplify: This can be regard as vector pointer to old-image-center scaling.\n    tryToScale (scaleDelta) {\n      let newScale = this.scale * scaleDelta\n      if (this.zoomingElastic) {\n        // damping\n        if (newScale < this.minScale || newScale > this.maxScale) {\n          let log = Math.log2(scaleDelta)\n          log *= 0.2\n          scaleDelta = Math.pow(2, log)\n          newScale = this.scale * scaleDelta\n        }\n      } else {\n        if (newScale < this.minScale) newScale = this.minScale\n        else if (newScale > this.maxScale) newScale = this.maxScale\n      }\n      scaleDelta = newScale / this.scale\n      this.scale = newScale\n      if (this.pivot !== 'image-center') {\n        let normMousePosX = (this.pointerPosX - this.containerLeft) / this.containerWidth\n        let normMousePosY = (this.pointerPosY - this.containerTop) / this.containerHeight\n        this.translateX = (0.5 + this.translateX - normMousePosX) * scaleDelta + normMousePosX - 0.5\n        this.translateY = (0.5 + this.translateY - normMousePosY) * scaleDelta + normMousePosY - 0.5\n      }\n    },\n    setPointerPosCenter () {\n      this.pointerPosX = this.containerLeft + this.containerWidth / 2\n      this.pointerPosY = this.containerTop + this.containerHeight / 2\n    },\n    // pan\n    onPointerMove (newMousePosX, newMousePosY) {\n      if (this.isPointerDown) {\n        let pixelDeltaX = newMousePosX - this.pointerPosX\n        let pixelDeltaY = newMousePosY - this.pointerPosY\n        // console.log('pixelDeltaX, pixelDeltaY', pixelDeltaX, pixelDeltaY)\n        if (!this.panLocked) {\n          this.translateX += pixelDeltaX / this.containerWidth\n          this.translateY += pixelDeltaY / this.containerHeight\n        }\n      }\n      this.pointerPosX = newMousePosX\n      this.pointerPosY = newMousePosY\n    },\n    onInteractionEnd: _debounce(function ()  {\n      this.limit()\n      this.panLocked = this.scale === 1\n      this.$emit('update:zoomed', !this.panLocked)\n    }, 100),\n    // limit the scale between max and min and the translate within the viewport\n    limit () {\n      // scale\n      if (this.scale < this.minScale) {\n        this.scale = this.minScale\n        // FIXME this sometimes will not reset when pinching in\n        // this.tryToScale(this.minScale / this.scale)\n      } else if (this.scale > this.maxScale) {\n        this.tryToScale(this.maxScale / this.scale)\n      }\n      // translate\n      if (this.limitTranslation) {\n        let translateLimit = this.calcTranslateLimit()\n        if (Math.abs(this.translateX) > translateLimit.x) {\n          this.translateX *= translateLimit.x / Math.abs(this.translateX)\n        }\n        if (Math.abs(this.translateY) > translateLimit.y) {\n          this.translateY *= translateLimit.y / Math.abs(this.translateY)\n        }\n      }\n    },\n    calcTranslateLimit () {\n      if (this.getMarginDirection() === 'y') {\n        let imageToContainerRatio = this.containerWidth / this.aspectRatio / this.containerHeight\n        let translateLimitY = (this.scale * imageToContainerRatio - 1) / 2\n        if (translateLimitY < 0) translateLimitY = 0\n        return {\n          x: (this.scale - 1) / 2,\n          y: translateLimitY,\n        }\n      } else {\n        let imageToContainerRatio = this.containerHeight * this.aspectRatio / this.containerWidth\n        let translateLimitX = (this.scale * imageToContainerRatio - 1) / 2\n        if (translateLimitX < 0) translateLimitX = 0\n        return {\n          x: translateLimitX,\n          y: (this.scale - 1) / 2,\n        }\n      }\n    },\n    getMarginDirection () {\n      let containerRatio = this.containerWidth / this.containerHeight\n      return containerRatio > this.aspectRatio ? 'x' : 'y'\n    },\n    onDoubleTap (ev) {\n      if (this.scale === 1) {\n        if (ev.clientX > 0) {\n          this.pointerPosX = ev.clientX\n          this.pointerPosY = ev.clientY\n        }\n        this.tryToScale(Math.min(3, this.maxScale))\n      } else {\n        this.reset()\n      }\n      this.onInteractionEnd()\n    },\n    // reactive\n    onWindowResize () {\n      let styles = window.getComputedStyle(this.$el)\n      this.containerWidth = parseFloat(styles.width)\n      this.containerHeight = parseFloat(styles.height)\n      this.setPointerPosCenter()\n      this.limit()\n    },\n    refreshContainerPos () {\n      let rect = this.$el.getBoundingClientRect()\n      this.containerLeft = rect.left\n      this.containerTop = rect.top\n    },\n    loop () {\n      this.animScale = this.gainOn(this.animScale, this.scale)\n      this.animTranslateX = this.gainOn(this.animTranslateX, this.translateX)\n      this.animTranslateY = this.gainOn(this.animTranslateY, this.translateY)\n      this.raf = window.requestAnimationFrame(this.loop)\n      // console.log('loop', this.raf)\n    },\n    gainOn (from, to) {\n      let delta = (to - from) * 0.3\n      // console.log('gainOn', from, to, from + delta)\n      if (Math.abs(delta) > 1e-5) {\n        return from + delta\n      } else {\n        return to\n      }\n    },\n    // Mouse Events ------------------------------------------------------------\n    // Mouse wheel scroll,  TrackPad pinch or TrackPad scroll\n    onMouseWheel (ev) {\n      if (!this.mouseWheelToZoom) return\n      // prevent is used to stop the page scroll elastic effects\n      ev.preventDefault()\n      if (ev.detail) ev.wheelDelta = ev.detail * -10\n      let currTime = Date.now()\n      if (Math.abs(ev.wheelDelta) === 120) {\n        // Throttle the TouchPad pinch on Mac, or it will be too sensitive\n        if (currTime - this.lastFullWheelTime > 50) {\n          this.onMouseWheelDo(ev.wheelDelta)\n          this.lastFullWheelTime = currTime\n        }\n      } else {\n        if (currTime - this.lastWheelTime > 50 && typeof ev.deltaX === 'number') {\n          this.lastWheelDirection = (ev.detail == 0 && Math.abs(ev.deltaX) > Math.abs(ev.deltaY)) ? 'x' : 'y'\n          if (this.lastWheelDirection === 'x') {\n            this.$emit('swipe', ev.deltaX > 0 ? 'left' : 'right')\n          }\n        }\n        if (this.lastWheelDirection === 'y') {\n          this.onMouseWheelDo(ev.wheelDelta)\n        }\n      }\n      this.lastWheelTime = currTime\n    },\n    onMouseWheelDo (wheelDelta) {\n      // Value basis: One mouse wheel (wheelDelta=+-120) means 1.25/0.8 scale.\n      let scaleDelta = Math.pow(1.25, wheelDelta / 120)\n      this.tryToScale(scaleDelta)\n      this.onInteractionEnd()\n    },\n    onMouseDown (ev) {\n      this.refreshContainerPos()\n      this.isPointerDown = true\n      // Open the context menu then click other place will skip the mousemove events.\n      // This will cause the pointerPosX/Y NOT sync, then we will need to fix it on mousedown event.\n      this.pointerPosX = ev.clientX\n      this.pointerPosY = ev.clientY\n      // console.log('onMouseDown', ev)\n    },\n    onMouseUp (ev) {\n      this.isPointerDown = false\n      this.onInteractionEnd()\n    },\n    onMouseMove (ev) {\n      this.onPointerMove(ev.clientX, ev.clientY)\n      // console.log('onMouseMove client, offset', ev.clientX, ev.clientY)\n    },\n    // Touch Events ------------------------------------------------------------\n    onTouchStart (ev) {\n      if (ev.touches.length === 1) {\n        this.refreshContainerPos()\n        this.pointerPosX = ev.touches[0].clientX\n        this.pointerPosY = ev.touches[0].clientY\n        this.isPointerDown = true\n      } else if (ev.touches.length === 2) {\n        this.isPointerDown = true\n        // pos\n        this.pointerPosX = (ev.touches[0].clientX + ev.touches[1].clientX) / 2\n        this.pointerPosY = (ev.touches[0].clientY + ev.touches[1].clientY) / 2\n        // dist\n        let distX = ev.touches[0].clientX - ev.touches[1].clientX\n        let distY = ev.touches[0].clientY - ev.touches[1].clientY\n        this.twoFingerInitDist = Math.sqrt(distX * distX + distY * distY)\n      }\n      // console.log('onTouchStart', ev.touches)\n    },\n    onTouchEnd (ev) {\n      if (ev.touches.length === 0) {\n        this.isPointerDown = false\n        // Near 1 to set 1\n        if (Math.abs(this.scale - 1) < 0.1) this.scale = 1\n        this.onInteractionEnd()\n      } else if (ev.touches.length === 1) {\n        this.pointerPosX = ev.touches[0].clientX\n        this.pointerPosY = ev.touches[0].clientY\n      }\n      // console.log('onTouchEnd', ev.touches.length)\n    },\n    onTouchMove (ev) {\n      if (ev.touches.length === 1) {\n        this.onPointerMove(ev.touches[0].clientX, ev.touches[0].clientY)\n      } else if (ev.touches.length === 2) {\n        // pos\n        let newMousePosX = (ev.touches[0].clientX + ev.touches[1].clientX) / 2\n        let newMousePosY = (ev.touches[0].clientY + ev.touches[1].clientY) / 2\n        this.onPointerMove(newMousePosX, newMousePosY)\n        this.pointerPosX = newMousePosX\n        this.pointerPosY = newMousePosY\n        // dist\n        let distX = ev.touches[0].clientX - ev.touches[1].clientX\n        let distY = ev.touches[0].clientY - ev.touches[1].clientY\n        let newTwoFingerDist = Math.sqrt(distX * distX + distY * distY)\n        this.tryToScale(newTwoFingerDist / this.twoFingerInitDist)\n        this.twoFingerInitDist = newTwoFingerDist\n      }\n      // console.log('onTouchMove', this.pointerPosX, this.pointerPosY)\n    },\n  },\n}\n</script>\n\n<style scoped>\n.vue-zoomer {\n  overflow: hidden;\n}\n.zoomer {\n  transform-origin: 50% 50%;\n  width: 100%;\n  height: 100%;\n}\n.zoomer > img {\n  /* remove the 4px gap below the image */\n  vertical-align: top;\n  user-drag: none;\n  -webkit-user-drag: none;\n  -moz-user-drag: none;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}