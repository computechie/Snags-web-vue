{"ast":null,"code":"function Grid(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  let wasMultiRow;\n\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n\n    return spaceBetween;\n  };\n\n  const initSlides = slides => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n\n  const unsetSlides = () => {\n    if (swiper.slides) {\n      swiper.slides.forEach(slide => {\n        if (slide.swiperSlideGridSet) {\n          slide.style.height = '';\n          slide.style[swiper.getDirectionLabel('margin-top')] = '';\n        }\n      });\n    }\n  };\n\n  const updateSlide = (i, slide, slides) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.row = row;\n    slide.column = column;\n    slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;\n    slide.style[swiper.getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n    slide.swiperSlideGridSet = true;\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n\n    if (!swiper.params.cssMode) {\n      swiper.wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    }\n\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  const onInit = () => {\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n  };\n\n  const onUpdate = () => {\n    const {\n      params,\n      el\n    } = swiper;\n    const isMultiRow = params.grid && params.grid.rows > 1;\n\n    if (wasMultiRow && !isMultiRow) {\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n      numFullColumns = 1;\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      el.classList.add(`${params.containerModifierClass}grid`);\n\n      if (params.grid.fill === 'column') {\n        el.classList.add(`${params.containerModifierClass}grid-column`);\n      }\n\n      swiper.emitContainerClasses();\n    }\n\n    wasMultiRow = isMultiRow;\n  };\n\n  on('init', onInit);\n  on('update', onUpdate);\n  swiper.grid = {\n    initSlides,\n    unsetSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\nexport { Grid as default };","map":{"version":3,"names":["Grid","_ref","swiper","extendParams","on","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","wasMultiRow","getSpaceBetween","spaceBetween","params","indexOf","parseFloat","replace","size","initSlides","slides","slidesPerView","slidesLength","virtual","enabled","length","Math","floor","ceil","max","unsetSlides","forEach","slide","swiperSlideGridSet","style","height","getDirectionLabel","updateSlide","i","slidesPerGroup","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","cssMode","wrapperEl","newSlidesGrid","slidesGridItem","push","splice","onInit","onUpdate","el","isMultiRow","classList","remove","containerModifierClass","emitContainerClasses","add","default"],"sources":["Q:/Projects/Snags-web-vue/node_modules/swiper/modules/grid.mjs"],"sourcesContent":["function Grid(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  let wasMultiRow;\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n    return spaceBetween;\n  };\n  const initSlides = slides => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n  const unsetSlides = () => {\n    if (swiper.slides) {\n      swiper.slides.forEach(slide => {\n        if (slide.swiperSlideGridSet) {\n          slide.style.height = '';\n          slide.style[swiper.getDirectionLabel('margin-top')] = '';\n        }\n      });\n    }\n  };\n  const updateSlide = (i, slide, slides) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.row = row;\n    slide.column = column;\n    slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;\n    slide.style[swiper.getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n    slide.swiperSlideGridSet = true;\n  };\n  const updateWrapperSize = (slideSize, snapGrid) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    if (!swiper.params.cssMode) {\n      swiper.wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    }\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  const onInit = () => {\n    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n  };\n  const onUpdate = () => {\n    const {\n      params,\n      el\n    } = swiper;\n    const isMultiRow = params.grid && params.grid.rows > 1;\n    if (wasMultiRow && !isMultiRow) {\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n      numFullColumns = 1;\n      swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n      el.classList.add(`${params.containerModifierClass}grid`);\n      if (params.grid.fill === 'column') {\n        el.classList.add(`${params.containerModifierClass}grid-column`);\n      }\n      swiper.emitContainerClasses();\n    }\n    wasMultiRow = isMultiRow;\n  };\n  on('init', onInit);\n  on('update', onUpdate);\n  swiper.grid = {\n    initSlides,\n    unsetSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}\n\nexport { Grid as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}