{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n\n  return _openBlock(), _createElementBlock(\"section\", null, [_createElementVNode(\"div\", {\n    class: \"container-fluid\",\n    style: _normalizeStyle({\n      padding: `${this.padding0}`\n    })\n  }, [_createVNode(_component_router_view)], 4)]);\n}","map":{"version":3,"mappings":";;;;uBAEYA,oBAIU,SAJV,EAIU,IAJV,EAIU,CAHPC,oBAEM,KAFN,EAEM;IAFDC,KAAK,EAAC,iBAEL;IAFyBC,KAAK;MAAAC,iBAAoBC,QAAQ;IAA5B;EAE9B,CAFN,GACGC,aAA2BC,sBAA3B,EADH,IAGO,CAJV","names":["_createElementBlock","_createElementVNode","class","style","padding","padding0","_createVNode","_component_router_view"],"sourceRoot":"","sources":["Q:\\Projects\\DFM v2 vue\\DFMLive2-vue\\src\\App.vue"],"sourcesContent":["<template>\n           \n            <section>\n               <div class=\"container-fluid\"  :style=\"{padding: `${this.padding0}`}\">\n                  <router-view></router-view>\n               </div>\n            </section>\n\n</template>\n\n<script>\n/*\n//visual settings:\nvar onLoadSidebarWidth = 200;\nvar breakPointForSmallScreen = 750;\nvar minWSidebarWidth = 38;\n\nvar breakPointHideSidebarDescriptions = 150;\nvar maxPercentageSidebarWidth = 30;\nvar onLoadContentWidth = window.innerWidth - onLoadSidebarWidth;\n*/\n\n\nexport default {\n  \n  data() {\n    return {\n       defaultLoginBackground: 'images/login-background.jpg', \n       mainAppTitle : 'DFM Live',\n      \n\n      showMenu:false,\n\n       //ini settings\n      linkToHelpFile : 'https://safetyfile.onlinedfm.com/Help/UserguideV2.0.1.84.pdf',\n\n      // for visual settings:\n      \n      padding0:'0px',\n      dividerPosition: 200, //px default width of the left sidebar!\n      contentWidth: (window.innerWidth - 200), //px width of the main content\n      isActive: true,       //in start visible sidebar icon descriptions\n      isCentered: false,     //sidebar icons on left at page load\n      iconCloseOpen: '&times;',\n    };\n  },\n\n  methods: {\n    /// ------------------------------\n    /// resizable left sidebar!\n    handleDragging(e) {\n      \n      const percentage = (e.pageX / window.innerWidth) * 100;\n\n      if ( (e.pageX+1) > 38 && percentage <= 30) {\n        //only resizable if width of the left sidebar is in this percentage range\n        this.dividerPosition = (percentage / 100) * window.innerWidth;\n        this.contentWidth = window.innerWidth - this.dividerPosition;\n      }\n      \n      // on small screens hide sidebar menu descriptions\n      if (e.pageX < 150) {\n        this.isActive = false;\n        this.iconCloseOpen='&#9776;'\n        this.isCentered=true;\n      } else {\n        this.isActive = true;\n        this.iconCloseOpen='&times;'\n        this.isCentered=false;\n      }\n      // -------------------\n    },\n    startDragging() {\n        document.addEventListener(\"mousemove\", this.handleDragging);\n    },\n    endDragging() {\n      document.removeEventListener(\"mousemove\", this.handleDragging);\n    },\n\n   \n    displayMenuToggle(){\n     \n       this.showMenu = true;\n       //this.getDimensions() ;\n\n       this.padding0='12px';\n       this.dividerPosition= 200; //px default width of the left sidebar!\n       this.contentWidth= (window.innerWidth - 200); //px width of the main content\n    },\n    setToFullScreenWidth(){\n     \n      this.contentWidth = window.innerWidth // login page has full screen width without sidebar\n      this.padding0 = '0px';\n    },\n\n    getDimensions() {\n      //on window resize\n    \n      if (window.innerWidth > 750) {\n        this.dividerPosition = 200;\n        this.contentWidth = window.innerWidth - this.dividerPosition;\n        this.isActive = true;\n        this.iconCloseOpen= '&times;'\n        this.isCentered=false;\n       \n      } else {\n       \n        this.dividerPosition = 38;\n        this.isActive = false;\n        this.iconCloseOpen='&#9776;'\n        this.isCentered=true;\n      }\n     \n    },\n    sidebarColapse() {\n      \n      this.isActive = !this.isActive;\n      this.isCentered= !this.isActive;\n      \n      if (this.dividerPosition > 38) {\n        this.dividerPosition = 38;\n        this.contentWidth = window.innerWidth - this.dividerPosition;\n        this.iconCloseOpen='&#9776;'\n      } else {\n        this.dividerPosition = 200;\n        this.contentWidth = window.innerWidth - this.dividerPosition;\n        this.iconCloseOpen= '&times;'\n    \n      }\n    },\n\n    manualLogout(){\n       this.$store.dispatch('logout');\n       this.showMenu = false;\n       this.$router.replace('/');\n    }\n    \n    // ----------- end resizable left menu -------\n  },\n\n  mounted() {\n    \n    window.addEventListener(\"resize\", this.getDimensions);\n  },\n  unmounted() {\n    window.removeEventListener(\"resize\", this.getDimensions);\n  },\n\n  created() {\n  \n    //check if user is loggen in\n    this.$store.dispatch('autoLogin');\n\n    \n    \n    //on create (on load)\n    // this.projects = projectsObject; // parsed json\n\n    //hidden sidebar on load if small screen\n    if (window.innerWidth < 750) {\n      this.dividerPosition = 38;\n    }\n\n    if (window.innerWidth < 750) {\n      this.isActive = false;\n      this.iconCloseOpen='&#9776;';\n      this.isCentered=true;\n    }else{\n      this.isActive = true;\n      this.iconCloseOpen='&times;';\n      this.isCentered=false;\n    }\n  },\n  computed:{\n    isLoggedIn(){\n\n      return this.$store.getters.isAuthenticated;\n    },\n     userFullname(){\n      return this.$store.getters.getUserFullName;\n    },\n    didAutoLogout(){\n      return this.$store.getters.didAutoLogout;\n    }\n  },\n\n  watch: {\n    didAutoLogout(curValue, oldValue){\n        if(curValue && curValue !== oldValue){\n           this.showMenu = false;\n           this.$router.replace('/');\n        }\n    }\n  }\n\n\n\n};\n</script>"]},"metadata":{},"sourceType":"module"}