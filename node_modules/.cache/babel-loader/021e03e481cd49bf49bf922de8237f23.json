{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"sdsdf\");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_top_bar = _resolveComponent(\"top-bar\");\n\n  const _component_side_bar = _resolveComponent(\"side-bar\");\n\n  const _component_router_view = _resolveComponent(\"router-view\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_top_bar), _createElementVNode(\"div\", {\n    class: \"wrapper\",\n    onMouseup: _cache[0] || (_cache[0] = $event => $options.endDragging())\n  }, [_createVNode(_component_side_bar, null, {\n    default: _withCtx(() => [_hoisted_1]),\n    _: 1\n    /* STABLE */\n\n  }), _createVNode(_component_router_view, {\n    onSetFullscreenwidth: $options.setToFullScreenWidth,\n    onDisplayMenu: $options.displayMenuToggle\n  }, null, 8\n  /* PROPS */\n  , [\"onSetFullscreenwidth\", \"onDisplayMenu\"])], 32\n  /* HYDRATE_EVENTS */\n  )], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;iDAMsB;;;;;;;;;6DAJtBA,aAAmBC,kBAAnB,GAEAC,oBAMM,KANN,EAMM;IANDC,KAAK,EAAC,SAML;IANgBC,SAAO,sCAAEC,sBAAF;EAMvB,CANN,GAEYL,aAA0BM,mBAA1B,EAA0B,IAA1B,EAA0B;sBAAhB,MAAK,aAAW;;;;EAAA,CAA1B,GAEAN,aAA2GO,sBAA3G,EAA2G;IAA5FC,oBAAmB,EAAEH,6BAAuE;IAAhDI,aAAY,EAAEJ;EAAkC,CAA3G;;EAAA,6CAJZ;;EAAA","names":["_createVNode","_component_top_bar","_createElementVNode","class","onMouseup","$options","_component_side_bar","_component_router_view","onSetFullscreenwidth","onDisplayMenu"],"sourceRoot":"","sources":["H:\\www\\vue\\vue-cli-01-a-new-vue-project\\src\\components\\PagesHolder.vue"],"sourcesContent":["<template>\r\n\r\n<top-bar></top-bar>\r\n\r\n<div class=\"wrapper\" @mouseup=\"endDragging()\">\r\n\r\n            <side-bar>sdsdf</side-bar>   \r\n            \r\n            <router-view  @set-fullscreenwidth=\"setToFullScreenWidth\" @display-menu=\"displayMenuToggle\" ></router-view>\r\n\r\n</div> \r\n  \r\n</template>\r\n\r\n\r\n\r\n\r\n<script>\r\n/*\r\n//visual settings:\r\nvar onLoadSidebarWidth = 200;\r\nvar breakPointForSmallScreen = 750;\r\nvar minWSidebarWidth = 38;\r\n\r\nvar breakPointHideSidebarDescriptions = 150;\r\nvar maxPercentageSidebarWidth = 30;\r\nvar onLoadContentWidth = window.innerWidth - onLoadSidebarWidth;\r\n*/\r\n\r\n\r\nexport default {\r\n  \r\n  data() {\r\n    return {\r\n\r\n     \r\n       //ini settings\r\n      linkToHelpFile : 'https://safetyfile.onlinedfm.com/Help/UserguideV2.0.1.84.pdf',\r\n\r\n      // for visual settings:\r\n      \r\n      padding0:'12px',\r\n      dividerPosition: 200, //px default width of the left sidebar!\r\n      contentWidth: (window.innerWidth - 200), //px width of the main content\r\n      isActive: true,       //in start visible sidebar icon descriptions\r\n      isCentered: false,     //sidebar icons on left at page load\r\n      iconCloseOpen: '&times;',\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    /// ------------------------------\r\n    /// resizable left sidebar!\r\n    handleDragging(e) {\r\n      \r\n      const percentage = (e.pageX / window.innerWidth) * 100;\r\n\r\n      if ( (e.pageX+1) > 38 && percentage <= 30) {\r\n        //only resizable if width of the left sidebar is in this percentage range\r\n        this.dividerPosition = (percentage / 100) * window.innerWidth;\r\n        this.contentWidth = window.innerWidth - this.dividerPosition;\r\n      }\r\n      \r\n      // on small screens hide sidebar menu descriptions\r\n      if (e.pageX < 150) {\r\n        this.isActive = false;\r\n        this.iconCloseOpen='&#9776;'\r\n        this.isCentered=true;\r\n      } else {\r\n        this.isActive = true;\r\n        this.iconCloseOpen='&times;'\r\n        this.isCentered=false;\r\n      }\r\n      // -------------------\r\n    },\r\n    startDragging() {\r\n        document.addEventListener(\"mousemove\", this.handleDragging);\r\n    },\r\n    endDragging() {\r\n      document.removeEventListener(\"mousemove\", this.handleDragging);\r\n    },\r\n\r\n   \r\n    displayMenuToggle(){\r\n     \r\n       this.showMenu = true;\r\n       //this.getDimensions() ;\r\n\r\n       this.padding0='12px';\r\n       this.dividerPosition= 200; //px default width of the left sidebar!\r\n       this.contentWidth= (window.innerWidth - 200); //px width of the main content\r\n    },\r\n    setToFullScreenWidth(){\r\n     \r\n      this.contentWidth = window.innerWidth // login page has full screen width without sidebar\r\n      this.padding0 = '0px';\r\n    },\r\n\r\n    getDimensions() {\r\n      //on window resize\r\n    \r\n      if (window.innerWidth > 750) {\r\n        this.dividerPosition = 200;\r\n        this.contentWidth = window.innerWidth - this.dividerPosition;\r\n        this.isActive = true;\r\n        this.iconCloseOpen= '&times;'\r\n        this.isCentered=false;\r\n       \r\n      } else {\r\n       \r\n        this.dividerPosition = 38;\r\n        this.isActive = false;\r\n        this.iconCloseOpen='&#9776;'\r\n        this.isCentered=true;\r\n      }\r\n     \r\n    },\r\n    sidebarColapse() {\r\n      \r\n      this.isActive = !this.isActive;\r\n      this.isCentered= !this.isActive;\r\n      \r\n      if (this.dividerPosition > 38) {\r\n        this.dividerPosition = 38;\r\n        this.contentWidth = window.innerWidth - this.dividerPosition;\r\n        this.iconCloseOpen='&#9776;'\r\n      } else {\r\n        this.dividerPosition = 200;\r\n        this.contentWidth = window.innerWidth - this.dividerPosition;\r\n        this.iconCloseOpen= '&times;'\r\n    \r\n      }\r\n    },\r\n\r\n    manualLogout(){\r\n       this.$store.dispatch('logout');\r\n       this.showMenu = false;\r\n       this.$router.replace('/');\r\n    }\r\n    \r\n    // ----------- end resizable left menu -------\r\n  },\r\n\r\n  mounted() {\r\n    \r\n    window.addEventListener(\"resize\", this.getDimensions);\r\n  },\r\n  unmounted() {\r\n    window.removeEventListener(\"resize\", this.getDimensions);\r\n  },\r\n\r\n  created() {\r\n  \r\n    //check if user is loggen in\r\n    this.$store.dispatch('autoLogin');\r\n\r\n    \r\n    \r\n    //on create (on load)\r\n    // this.projects = projectsObject; // parsed json\r\n\r\n    //hidden sidebar on load if small screen\r\n    if (window.innerWidth < 750) {\r\n      this.dividerPosition = 38;\r\n    }\r\n\r\n    if (window.innerWidth < 750) {\r\n      this.isActive = false;\r\n      this.iconCloseOpen='&#9776;';\r\n      this.isCentered=true;\r\n    }else{\r\n      this.isActive = true;\r\n      this.iconCloseOpen='&times;';\r\n      this.isCentered=false;\r\n    }\r\n  },\r\n\r\n\r\n \r\n\r\n\r\n\r\n};\r\n</script>\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}