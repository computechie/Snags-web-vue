{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nlet timer; // for holding timer function for auto logout if session expire\n\nexport default {\n  async login(context, payload) {\n    return context.dispatch('auth', { ...payload\n    });\n  },\n\n  async auth(context, payload) {\n    //const token = context.rootGetters.token; //User token !!\n    //   const baseUrl = localStorage.getItem('_rootRestUrl');\n    const response = await fetch(proxy + 'rest/Authenthication/Login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: payload.username,\n        password: payload.password\n      })\n    });\n    alert(response.status);\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      // console.log(responseData);\n      const error = new Error(responseData.message || 'Failed to authenticate.');\n      throw error;\n    } //expecting in json recive 'exipresIn' in minutes! how long will session exists\n\n\n    const expiresIn = 60 * 1000 * 60; //auto logout if token expires\n\n    timer = setTimeout(function () {\n      context.dispatch('autoLogout');\n    }, expiresIn); //store login details in local storeage so that on refresh page app remember loged user!\n\n    localStorage.setItem('token', responseData.key);\n    localStorage.setItem('userId', responseData.userId);\n    localStorage.setItem('tokenExpiration', responseData.validUntil); //data needed from login json:\n    //localStorage.setItem('userFullname',payload.username);\n\n    localStorage.setItem('expiresIn', expiresIn);\n    context.commit('setUser', {\n      token: responseData.key,\n      userId: responseData.userId,\n      userFullname: \"Full name\"\n    });\n  },\n\n  logout(context) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('userFullname');\n    localStorage.removeItem('tokenExpiration');\n    localStorage.removeItem('expiresIn');\n    clearTimeout(timer);\n    context.commit('setUser', {\n      token: null,\n      userId: null,\n      userFullname: null,\n      tokenExpiration: null\n    });\n  },\n\n  //try to login if local storage containt login details\n  autoLogin(context) {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    const userFullname = localStorage.getItem('userFullname');\n    const tokenExpiration = localStorage.getItem('tokenExpiration');\n    const willExpire = +tokenExpiration - new Date().getTime();\n    const expiresIn = localStorage.getItem('expiresIn');\n\n    if (willExpire < 0) {\n      //if token expires do nothing\n      return;\n    } //if is token ok then we must extend life of the token for the next expiration time\n\n\n    const expirationDate = new Date().getTime() + expiresIn;\n    localStorage.setItem('tokenExpiration', expirationDate); //set new timer\n\n    timer = setTimeout(function () {\n      context.dispatch('autoLogout');\n    }, expiresIn); //login \"again\" this user\n\n    if (token && userId && userFullname) {\n      context.commit('setUser', {\n        token: token,\n        userId: userId,\n        userFullname: userFullname\n      });\n    }\n  },\n\n  autoLogout(context) {\n    context.dispatch('logout');\n    context.commit('setAutoLogout');\n  }\n\n};","map":{"version":3,"names":["timer","login","context","payload","dispatch","auth","response","fetch","proxy","method","headers","body","JSON","stringify","username","password","alert","status","responseData","json","ok","error","Error","message","expiresIn","setTimeout","localStorage","setItem","key","userId","validUntil","commit","token","userFullname","logout","removeItem","clearTimeout","tokenExpiration","autoLogin","getItem","willExpire","Date","getTime","expirationDate","autoLogout"],"sources":["Q:/Projects/DFM v2/src/store/modules/auth/actions.js"],"sourcesContent":["let timer; // for holding timer function for auto logout if session expire\r\n\r\n\r\n\r\n\r\nexport default {\r\n    \r\n\r\n\r\n    async login(context,payload) {\r\n          return  context.dispatch('auth',{\r\n                ...payload\r\n            });\r\n    }, \r\n    \r\n    async  auth(context,payload){\r\n        \r\n        //const token = context.rootGetters.token; //User token !!\r\n\r\n     //   const baseUrl = localStorage.getItem('_rootRestUrl');\r\n   \r\n\r\n        const response = await fetch(proxy+'rest/Authenthication/Login',{\r\n               method: 'POST',\r\n               headers: {'Content-Type':'application/json'},\r\n               body: JSON.stringify({\r\n                   username: payload.username,\r\n                   password: payload.password\r\n               })\r\n              \r\n   \r\n          });\r\n\r\n          alert(response.status)\r\n                 \r\n          const responseData = await response.json();\r\n   \r\n          if(!response.ok){\r\n              // console.log(responseData);\r\n               const error = new Error(responseData.message || 'Failed to authenticate.');\r\n               throw error;\r\n          }\r\n\r\n        \r\n\r\n\r\n          //expecting in json recive 'exipresIn' in minutes! how long will session exists\r\n          const expiresIn = 60 * 1000 * 60;\r\n            \r\n          //auto logout if token expires\r\n          timer = setTimeout(function(){\r\n            context.dispatch('autoLogout');\r\n          },expiresIn);\r\n\r\n          \r\n\r\n          //store login details in local storeage so that on refresh page app remember loged user!\r\n         \r\n\r\n\r\n          localStorage.setItem('token',responseData.key);\r\n          localStorage.setItem('userId',responseData.userId);\r\n          localStorage.setItem('tokenExpiration',responseData.validUntil);\r\n         \r\n          //data needed from login json:\r\n\r\n          //localStorage.setItem('userFullname',payload.username);\r\n         \r\n          localStorage.setItem('expiresIn',expiresIn);\r\n\r\n          \r\n\r\n\r\n          context.commit('setUser',{\r\n                  token: responseData.key,\r\n                  userId : responseData.userId,\r\n                  userFullname: \"Full name\"\r\n                 \r\n   \r\n           });\r\n\r\n          \r\n   \r\n    },\r\n    \r\n    logout(context){\r\n\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userId');\r\n        localStorage.removeItem('userFullname');\r\n        localStorage.removeItem('tokenExpiration'); \r\n        localStorage.removeItem('expiresIn'); \r\n        \r\n\r\n        clearTimeout(timer);\r\n\r\n        context.commit('setUser', {\r\n            token : null,\r\n            userId : null,\r\n            userFullname : null,\r\n            tokenExpiration : null\r\n        })\r\n\r\n        \r\n\r\n    },\r\n\r\n    //try to login if local storage containt login details\r\n    autoLogin(context){\r\n       \r\n        const token = localStorage.getItem('token');\r\n        const userId = localStorage.getItem('userId');\r\n        const userFullname = localStorage.getItem('userFullname');\r\n        const tokenExpiration = localStorage.getItem('tokenExpiration');\r\n        const willExpire = +tokenExpiration - new Date().getTime();\r\n        const expiresIn =localStorage.getItem('expiresIn');\r\n\r\n        if(willExpire < 0){\r\n            //if token expires do nothing\r\n            return;\r\n        }\r\n       \r\n        //if is token ok then we must extend life of the token for the next expiration time\r\n                            \r\n        const expirationDate = new Date().getTime() + expiresIn ;\r\n        localStorage.setItem('tokenExpiration',expirationDate);\r\n\r\n       \r\n        //set new timer\r\n        timer = setTimeout(function(){\r\n            context.dispatch('autoLogout');\r\n        }, expiresIn)\r\n\r\n        //login \"again\" this user\r\n        if (token && userId && userFullname){\r\n            context.commit('setUser',{\r\n                  token: token,\r\n                  userId : userId,\r\n                  userFullname: userFullname\r\n                  \r\n            });\r\n        }\r\n\r\n    },\r\n    autoLogout(context){\r\n        context.dispatch('logout');\r\n        context.commit('setAutoLogout');\r\n            \r\n   \r\n    }\r\n\r\n\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}