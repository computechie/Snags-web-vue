{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nlet timer; // for holding timer function for auto logout if session expire\n\nexport default {\n  async login(context, payload) {\n    return context.dispatch('auth', { ...payload\n    });\n  },\n\n  async auth(context, payload) {\n    //const token = context.rootGetters.token; //User token !!\n    const baseUrl = localStorage.getItem('_rootRestUrl');\n    const response = await fetch(baseUrl + '/Authenthication/Login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: payload.username,\n        password: payload.password\n      })\n    });\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      // console.log(responseData);\n      const error = new Error(responseData.message || 'Failed to authenticate.');\n      throw error;\n    }\n\n    alert(\"lewgin\"); //expecting in json recive 'exipresIn' in minutes! how long will session exists\n\n    const expiresIn = +responseData[0].expiresIn * 1000 * 60; //auto logout if token expires\n\n    timer = setTimeout(function () {\n      context.dispatch('autoLogout');\n    }, expiresIn); //store login details in local storeage so that on refresh page app remember loged user!\n\n    localStorage.setItem('token', responseData[0].key);\n    localStorage.setItem('userId', responseData[0].userId);\n    localStorage.setItem('tokenExpiration', responseData[0].validUntil); //data needed from login json:\n\n    localStorage.setItem('userFullname', payload.username);\n    localStorage.setItem('expiresIn', expiresIn);\n    context.commit('setUser', {\n      token: responseData[0].key,\n      userId: responseData[0].userId,\n      userFullname: payload.username\n    });\n  },\n\n  logout(context) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('userFullname');\n    localStorage.removeItem('tokenExpiration');\n    localStorage.removeItem('expiresIn');\n    clearTimeout(timer);\n    context.commit('setUser', {\n      token: null,\n      userId: null,\n      userFullname: null,\n      tokenExpiration: null\n    });\n  },\n\n  //try to login if local storage containt login details\n  autoLogin(context) {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n    const userFullname = localStorage.getItem('userFullname');\n    const tokenExpiration = localStorage.getItem('tokenExpiration');\n    const willExpire = +tokenExpiration - new Date().getTime();\n    const expiresIn = localStorage.getItem('expiresIn');\n\n    if (willExpire < 0) {\n      //if token expires do nothing\n      return;\n    } //if is token ok then we must extend life of the token for the next expiration time\n\n\n    const expirationDate = new Date().getTime() + expiresIn;\n    localStorage.setItem('tokenExpiration', expirationDate); //set new timer\n\n    timer = setTimeout(function () {\n      context.dispatch('autoLogout');\n    }, expiresIn); //login \"again\" this user\n\n    if (token && userId && userFullname) {\n      context.commit('setUser', {\n        token: token,\n        userId: userId,\n        userFullname: userFullname\n      });\n    }\n  },\n\n  autoLogout(context) {\n    context.dispatch('logout');\n    context.commit('setAutoLogout');\n  }\n\n};","map":{"version":3,"names":["timer","login","context","payload","dispatch","auth","baseUrl","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","username","password","responseData","json","ok","error","Error","message","alert","expiresIn","setTimeout","setItem","key","userId","validUntil","commit","token","userFullname","logout","removeItem","clearTimeout","tokenExpiration","autoLogin","willExpire","Date","getTime","expirationDate","autoLogout"],"sources":["Q:/Projects/DFM v2/src/store/modules/auth/actions.js"],"sourcesContent":["let timer; // for holding timer function for auto logout if session expire\r\n\r\n\r\n\r\n\r\nexport default {\r\n    \r\n\r\n\r\n    async login(context,payload) {\r\n          return  context.dispatch('auth',{\r\n                ...payload\r\n            });\r\n    }, \r\n    \r\n    async  auth(context,payload){\r\n        \r\n        //const token = context.rootGetters.token; //User token !!\r\n\r\n        const baseUrl = localStorage.getItem('_rootRestUrl');\r\n   \r\n\r\n        const response = await fetch(baseUrl+'/Authenthication/Login',{\r\n               method: 'POST',\r\n               headers: {'Content-Type':'application/json'},\r\n               body: JSON.stringify({\r\n                   username: payload.username,\r\n                   password: payload.password\r\n               })\r\n              \r\n   \r\n          });\r\n                 \r\n          const responseData = await response.json();\r\n   \r\n          if(!response.ok){\r\n              // console.log(responseData);\r\n               const error = new Error(responseData.message || 'Failed to authenticate.');\r\n               throw error;\r\n          }\r\n\r\n          alert(\"lewgin\")\r\n\r\n\r\n          //expecting in json recive 'exipresIn' in minutes! how long will session exists\r\n          const expiresIn = +responseData[0].expiresIn * 1000 * 60;\r\n            \r\n          //auto logout if token expires\r\n          timer = setTimeout(function(){\r\n            context.dispatch('autoLogout');\r\n          },expiresIn)\r\n\r\n          //store login details in local storeage so that on refresh page app remember loged user!\r\n          localStorage.setItem('token',responseData[0].key);\r\n          localStorage.setItem('userId',responseData[0].userId);\r\n          localStorage.setItem('tokenExpiration',responseData[0].validUntil);\r\n         \r\n          //data needed from login json:\r\n          localStorage.setItem('userFullname',payload.username);\r\n         \r\n          localStorage.setItem('expiresIn',expiresIn);\r\n\r\n          context.commit('setUser',{\r\n                  token: responseData[0].key,\r\n                  userId : responseData[0].userId,\r\n                  userFullname: payload.username\r\n                 \r\n   \r\n           });\r\n\r\n          \r\n   \r\n    },\r\n    \r\n    logout(context){\r\n\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userId');\r\n        localStorage.removeItem('userFullname');\r\n        localStorage.removeItem('tokenExpiration'); \r\n        localStorage.removeItem('expiresIn'); \r\n        \r\n\r\n        clearTimeout(timer);\r\n\r\n        context.commit('setUser', {\r\n            token : null,\r\n            userId : null,\r\n            userFullname : null,\r\n            tokenExpiration : null\r\n        })\r\n\r\n        \r\n\r\n    },\r\n\r\n    //try to login if local storage containt login details\r\n    autoLogin(context){\r\n       \r\n        const token = localStorage.getItem('token');\r\n        const userId = localStorage.getItem('userId');\r\n        const userFullname = localStorage.getItem('userFullname');\r\n        const tokenExpiration = localStorage.getItem('tokenExpiration');\r\n        const willExpire = +tokenExpiration - new Date().getTime();\r\n        const expiresIn =localStorage.getItem('expiresIn');\r\n\r\n        if(willExpire < 0){\r\n            //if token expires do nothing\r\n            return;\r\n        }\r\n       \r\n        //if is token ok then we must extend life of the token for the next expiration time\r\n                            \r\n        const expirationDate = new Date().getTime() + expiresIn ;\r\n        localStorage.setItem('tokenExpiration',expirationDate);\r\n\r\n       \r\n        //set new timer\r\n        timer = setTimeout(function(){\r\n            context.dispatch('autoLogout');\r\n        }, expiresIn)\r\n\r\n        //login \"again\" this user\r\n        if (token && userId && userFullname){\r\n            context.commit('setUser',{\r\n                  token: token,\r\n                  userId : userId,\r\n                  userFullname: userFullname\r\n                  \r\n            });\r\n        }\r\n\r\n    },\r\n    autoLogout(context){\r\n        context.dispatch('logout');\r\n        context.commit('setAutoLogout');\r\n            \r\n   \r\n    }\r\n\r\n\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}