{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\" Systems \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Tree = _resolveComponent(\"Tree\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createVNode(_component_Tree, {\n    id: \"my-tree-id\",\n    ref: \"my-tree\",\n    \"custom-options\": $options.myCustomOptions,\n    \"custom-styles\": $options.myCustomStyles,\n    nodes: _ctx.treeDisplayData\n  }, null, 8\n  /* PROPS */\n  , [\"custom-options\", \"custom-styles\", \"nodes\"])]);\n}","map":{"version":3,"mappings":";;iDACO;;;;;uBAALA,oBASM,KATN,EASM,IATN,EASM,aAPJC,aAMQC,eANR,EAMQ;IALNC,EAAE,EAAC,YAKG;IAJNC,GAAG,EAAC,SAIE;IAHL,kBAAgBC,wBAGX;IAFL,iBAAeA,uBAEV;IADLC,KAAK,EAAEC;EACF,CANR;;EAAA,+CAOI,CATN","names":["_createElementBlock","_createVNode","_component_Tree","id","ref","$options","nodes","_ctx"],"sourceRoot":"","sources":["Q:\\Projects\\DFM v2\\src\\components\\pages\\CDE\\TreeFolders.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    Systems\r\n    <Tree\r\n      id=\"my-tree-id\"\r\n      ref=\"my-tree\"\r\n      :custom-options=\"myCustomOptions\"\r\n      :custom-styles=\"myCustomStyles\"\r\n      :nodes=\"treeDisplayData\"\r\n    ></Tree>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Tree from \"vuejs-tree\";\r\n\r\nexport default {\r\n  name: \"TreeExample\",\r\n  components: {\r\n    Tree,\r\n  },\r\n  data: function () {\r\n    return {\r\n      treeDisplayData: [\r\n        {\r\n          text: \"root 1\",\r\n          state: {  selected: false, expanded: false },\r\n          id: 1,\r\n          checkable: false,\r\n          nodes: [\r\n            {\r\n              text: \"Child 1\",\r\n              state: { selected: false, expanded: false },\r\n              id: 3,\r\n              nodes: [\r\n                {\r\n                  text: \"Grandchild 1\",\r\n                  state: { selected: false, expanded: false },\r\n                  id: 5,\r\n                },\r\n                {\r\n                  text: \"Grandchild 2\",\r\n                  state: {selected: false, expanded: false },\r\n                  id: 6,\r\n                },\r\n              ],\r\n            },\r\n            {\r\n              text: \"Child 2\",\r\n              state: {selected: false, expanded: false },\r\n              id: 4,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          text: \"Root 2\",\r\n          state: { selected: false, expanded: false },\r\n          id: 2,\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  computed: {\r\n    myCustomStyles() {\r\n      return {\r\n        tree: {\r\n          style: {\r\n            height: \"auto\",\r\n            maxHeight: \"300px\",\r\n            overflowY: \"visible\",\r\n            display: \"inline-block\",\r\n            textAlign: \"left\",\r\n          },\r\n        },\r\n        row: {\r\n          style: {\r\n            width: \"500px\",\r\n            cursor: \"pointer\",\r\n          },\r\n          child: {\r\n            class: \"childCLass\",\r\n            style: {\r\n              height: \"35px\",\r\n            },\r\n            active: {\r\n              style: {\r\n                height: \"35px\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        rowIndent: {\r\n          paddingLeft: \"20px\",\r\n        },\r\n        text: {\r\n          // class: \"\" // uncomment this line to overwrite the 'capitalize' class, or add a custom class\r\n          style: {},\r\n          active: {\r\n            style: {\r\n              \"font-weight\": \"bold\",\r\n              color: \"#FF0000\",\r\n              \"background-color\":\"red\"\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n    myCustomOptions() {\r\n      return {\r\n        treeEvents: {\r\n          expanded: {\r\n            state: false,\r\n          },\r\n          collapsed: {\r\n            state: false,\r\n          },\r\n          selected: {\r\n            state: true,\r\n            fn: this.mySelectedFunction,\r\n          },\r\n          checked: {\r\n            state: false,\r\n            fn: this.myCheckedFunction,\r\n          },\r\n        },\r\n        events: {\r\n          expanded: {\r\n            state: true,\r\n          },\r\n          selected: {\r\n            state: true,\r\n          },\r\n          checked: {\r\n            state: false,\r\n          },\r\n          editableName: {\r\n            state: true,\r\n            calledEvent: \"expanded\",\r\n          },\r\n        },\r\n        addNode: {\r\n          state: false,\r\n          fn: this.addNodeFunction,\r\n          appearOnHover: false,\r\n        },\r\n        editNode: { state: false, fn: null, appearOnHover: false },\r\n        deleteNode: {\r\n          state: false,\r\n          fn: this.deleteNodeFunction,\r\n          appearOnHover: false,\r\n        },\r\n        showTags: false,\r\n      };\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$refs[\"my-tree\"];\r\n  },\r\n  methods: {\r\n    myCheckedFunction: function (nodeId, state) {\r\n      console.log(`is ${nodeId} checked ? ${state}`);\r\n      console.log(this.$refs[\"my-tree\"].getCheckedNodes(\"id\"));\r\n      console.log(this.$refs[\"my-tree\"].getCheckedNodes(\"text\"));\r\n    },\r\n    mySelectedFunction: function (nodeId, state) {\r\n      console.log(`is ${nodeId} selected ? ${state}`);\r\n      console.log(this.$refs[\"my-tree\"].getSelectedNode());\r\n    },\r\n    deleteNodeFunction: function (node) {\r\n      const nodePath = this.$refs[\"my-tree\"].findNodePath(node.id);\r\n      const parentNodeId = nodePath.slice(-2, -1)[0];\r\n      if (parentNodeId === undefined) {\r\n        // 'root' node\r\n        const nodeIndex =\r\n          this.$refs[\"my-tree\"].nodes.findIndex((x) => x.id !== node.id) - 1;\r\n        this.$refs[\"my-tree\"].nodes.splice(nodeIndex, 1);\r\n      } else {\r\n        // child node\r\n        const parentNode = this.$refs[\"my-tree\"].findNode(parentNodeId);\r\n        const nodeIndex =\r\n          parentNode.nodes.findIndex((x) => x.id !== node.id) - 1;\r\n        parentNode.nodes.splice(nodeIndex, 1);\r\n      }\r\n      console.log(\"example: remove node\", node.id);\r\n    },\r\n    addNodeFunction: function (node) {\r\n      const newNode = {\r\n        text: \"Grandchild 2\",\r\n        id: Math.floor(Math.random() * 100),\r\n        state: { checked: false, selected: false, expanded: false },\r\n      };\r\n      console.log(\"example: add node\", newNode);\r\n      if (node.nodes === undefined) {\r\n        node.nodes = [newNode];\r\n      } else {\r\n        node.nodes.push(newNode);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}