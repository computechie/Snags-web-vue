{"ast":null,"code":"import Tree from \"vuejs-tree\";\nexport default {\n  name: \"TreeExample\",\n  components: {\n    Tree\n  },\n  data: function () {\n    return {\n      treeDisplayData: [{\n        text: \"root 1\",\n        state: {\n          selected: true,\n          expanded: false\n        },\n        id: 1,\n        checkable: false,\n        nodes: [{\n          text: \"Child 1\",\n          state: {\n            selected: false,\n            expanded: false\n          },\n          id: 3,\n          definition: \"pero\",\n          //tooltip\n          nodes: [{\n            text: \"Grandchild 1\",\n            state: {\n              selected: false,\n              expanded: false\n            },\n            id: 5\n          }, {\n            text: \"Grandchild 2\",\n            state: {\n              selected: false,\n              expanded: false\n            },\n            id: 6\n          }]\n        }, {\n          text: \"Child 2\",\n          state: {\n            selected: false,\n            expanded: false\n          },\n          id: 4\n        }]\n      }, {\n        text: \"Root 2\",\n        state: {\n          selected: false,\n          expanded: false\n        },\n        id: 2\n      }]\n    };\n  },\n  computed: {\n    myCustomStyles() {\n      return {\n        tree: {\n          style: {\n            height: \"auto\",\n            maxHeight: \"300px\",\n            overflowY: \"visible\",\n            display: \"inline-block\",\n            textAlign: \"left\"\n          }\n        },\n        row: {\n          style: {\n            width: \"500px\",\n            cursor: \"pointer\"\n          },\n          child: {\n            class: \"childCLass\",\n            style: {\n              height: \"35px\"\n            },\n            active: {\n              style: {\n                height: \"35px\"\n              }\n            }\n          }\n        },\n        rowIndent: {\n          paddingLeft: \"20px\"\n        },\n        text: {\n          // class: \"\" // uncomment this line to overwrite the 'capitalize' class, or add a custom class\n          style: {},\n          active: {\n            style: {\n              color: \"#ffffff\",\n              \"background-color\": \"red\"\n            }\n          }\n        }\n      };\n    },\n\n    myCustomOptions() {\n      return {\n        treeEvents: {\n          expanded: {\n            state: false,\n            fn: this.mySelectedFunction\n          },\n          collapsed: {\n            state: false\n          },\n          selected: {\n            state: true,\n            fn: this.mySelectedFunction\n          },\n          checked: {\n            state: false,\n            fn: this.myCheckedFunction\n          }\n        },\n        events: {\n          expanded: {\n            state: true,\n            calledEvent: \"selected\"\n          },\n          selected: {\n            state: true\n          },\n          checked: {\n            state: false\n          },\n          editableName: {\n            state: true,\n            calledEvent: \"expanded\"\n          }\n        },\n        addNode: {\n          state: false,\n          fn: this.addNodeFunction,\n          appearOnHover: false\n        },\n        editNode: {\n          state: false,\n          fn: null,\n          appearOnHover: false\n        },\n        deleteNode: {\n          state: false,\n          fn: this.deleteNodeFunction,\n          appearOnHover: false\n        },\n        showTags: true\n      };\n    }\n\n  },\n\n  mounted() {\n    this.$refs[\"my-tree\"];\n  },\n\n  methods: {\n    myCheckedFunction: function (nodeId, state) {\n      console.log(`is ${nodeId} checked ? ${state}`);\n      console.log(this.$refs[\"my-tree\"].getCheckedNodes(\"id\"));\n      console.log(this.$refs[\"my-tree\"].getCheckedNodes(\"text\"));\n    },\n    mySelectedFunction: function (nodeId, state) {\n      console.log(`is ${nodeId} selected ? ${state}`);\n      console.log(this.$refs[\"my-tree\"].getSelectedNode());\n    },\n    deleteNodeFunction: function (node) {\n      const nodePath = this.$refs[\"my-tree\"].findNodePath(node.id);\n      const parentNodeId = nodePath.slice(-2, -1)[0];\n\n      if (parentNodeId === undefined) {\n        // 'root' node\n        const nodeIndex = this.$refs[\"my-tree\"].nodes.findIndex(x => x.id !== node.id) - 1;\n        this.$refs[\"my-tree\"].nodes.splice(nodeIndex, 1);\n      } else {\n        // child node\n        const parentNode = this.$refs[\"my-tree\"].findNode(parentNodeId);\n        const nodeIndex = parentNode.nodes.findIndex(x => x.id !== node.id) - 1;\n        parentNode.nodes.splice(nodeIndex, 1);\n      }\n\n      console.log(\"example: remove node\", node.id);\n    },\n    addNodeFunction: function (node) {\n      const newNode = {\n        text: \"Grandchild 2\",\n        id: Math.floor(Math.random() * 100),\n        state: {\n          checked: false,\n          selected: false,\n          expanded: false\n        }\n      };\n      console.log(\"example: add node\", newNode);\n\n      if (node.nodes === undefined) {\n        node.nodes = [newNode];\n      } else {\n        node.nodes.push(newNode);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["Tree","name","components","data","treeDisplayData","text","state","selected","expanded","id","checkable","nodes","definition","computed","myCustomStyles","tree","style","height","maxHeight","overflowY","display","textAlign","row","width","cursor","child","class","active","rowIndent","paddingLeft","color","myCustomOptions","treeEvents","fn","mySelectedFunction","collapsed","checked","myCheckedFunction","events","calledEvent","editableName","addNode","addNodeFunction","appearOnHover","editNode","deleteNode","deleteNodeFunction","showTags","mounted","$refs","methods","nodeId","console","log","getCheckedNodes","getSelectedNode","node","nodePath","findNodePath","parentNodeId","slice","undefined","nodeIndex","findIndex","x","splice","parentNode","findNode","newNode","Math","floor","random","push"],"sourceRoot":"","sources":["Q:\\Projects\\DFM v2\\src\\components\\pages\\CDE\\TreeFolders.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    Systems\r\n    <Tree\r\n      id=\"my-tree-id\"\r\n      ref=\"my-tree\"\r\n      :custom-options=\"myCustomOptions\"\r\n      :custom-styles=\"myCustomStyles\"\r\n      :nodes=\"treeDisplayData\"\r\n    ></Tree>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Tree from \"vuejs-tree\";\r\n\r\nexport default {\r\n  name: \"TreeExample\",\r\n  components: {\r\n    Tree,\r\n  },\r\n  data: function () {\r\n    return {\r\n      treeDisplayData: [\r\n        {\r\n          text: \"root 1\",\r\n          state: {  selected: true, expanded: false },\r\n          id: 1,\r\n          checkable: false,\r\n          \r\n          nodes: [\r\n            {\r\n              text: \"Child 1\",\r\n              state: { selected: false, expanded: false },\r\n              id: 3,\r\n              definition:\"pero\",//tooltip\r\n              nodes: [\r\n                {\r\n                  text: \"Grandchild 1\",\r\n                  state: { selected: false, expanded: false },\r\n                  id: 5,\r\n                },\r\n                {\r\n                  text: \"Grandchild 2\",\r\n                  state: {selected: false, expanded: false },\r\n                  id: 6,\r\n                },\r\n              ],\r\n            },\r\n            {\r\n              text: \"Child 2\",\r\n              state: {selected: false, expanded: false },\r\n              id: 4,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          text: \"Root 2\",\r\n          state: { selected: false, expanded: false },\r\n          id: 2,\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  computed: {\r\n    myCustomStyles() {\r\n      return {\r\n        tree: {\r\n          style: {\r\n            height: \"auto\",\r\n            maxHeight: \"300px\",\r\n            overflowY: \"visible\",\r\n            display: \"inline-block\",\r\n            textAlign: \"left\",\r\n          },\r\n        },\r\n        row: {\r\n          style: {\r\n            width: \"500px\",\r\n            cursor: \"pointer\",\r\n          },\r\n          child: {\r\n            class: \"childCLass\",\r\n            style: {\r\n              height: \"35px\",\r\n            },\r\n            active: {\r\n              style: {\r\n                height: \"35px\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        rowIndent: {\r\n          paddingLeft: \"20px\",\r\n        },\r\n        text: {\r\n          // class: \"\" // uncomment this line to overwrite the 'capitalize' class, or add a custom class\r\n          style: {\r\n            \r\n          },\r\n          active: {\r\n            style: {\r\n             \r\n              color: \"#ffffff\",\r\n              \"background-color\":\"red\"\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n    myCustomOptions() {\r\n      return {\r\n        treeEvents: {\r\n          expanded: {\r\n            state: false,\r\n             fn: this.mySelectedFunction,\r\n          },\r\n          collapsed: {\r\n            state: false,\r\n          },\r\n          selected: {\r\n            state: true,\r\n            fn: this.mySelectedFunction,\r\n        \r\n          },\r\n          checked: {\r\n            state: false,\r\n            fn: this.myCheckedFunction,\r\n          },\r\n\r\n          \r\n        },\r\n        events: {\r\n          expanded: {\r\n            state: true,\r\n            calledEvent: \"selected\",\r\n          },\r\n          selected: {\r\n            state: true,\r\n          },\r\n          checked: {\r\n            state: false,\r\n          },\r\n          editableName: {\r\n            state: true,\r\n            calledEvent: \"expanded\",\r\n          },\r\n        },\r\n        addNode: {\r\n          state: false,\r\n          fn: this.addNodeFunction,\r\n          appearOnHover: false,\r\n        },\r\n        editNode: { state: false, fn: null, appearOnHover: false },\r\n        deleteNode: {\r\n          state: false,\r\n          fn: this.deleteNodeFunction,\r\n          appearOnHover: false,\r\n        },\r\n        showTags: true,\r\n      };\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$refs[\"my-tree\"];\r\n  },\r\n  methods: {\r\n    myCheckedFunction: function (nodeId, state) {\r\n      console.log(`is ${nodeId} checked ? ${state}`);\r\n      console.log(this.$refs[\"my-tree\"].getCheckedNodes(\"id\"));\r\n      console.log(this.$refs[\"my-tree\"].getCheckedNodes(\"text\"));\r\n    },\r\n    mySelectedFunction: function (nodeId, state) {\r\n      console.log(`is ${nodeId} selected ? ${state}`);\r\n      console.log(this.$refs[\"my-tree\"].getSelectedNode());\r\n      \r\n      \r\n    },\r\n    deleteNodeFunction: function (node) {\r\n      const nodePath = this.$refs[\"my-tree\"].findNodePath(node.id);\r\n      const parentNodeId = nodePath.slice(-2, -1)[0];\r\n      if (parentNodeId === undefined) {\r\n        // 'root' node\r\n        const nodeIndex =\r\n          this.$refs[\"my-tree\"].nodes.findIndex((x) => x.id !== node.id) - 1;\r\n        this.$refs[\"my-tree\"].nodes.splice(nodeIndex, 1);\r\n      } else {\r\n        // child node\r\n        const parentNode = this.$refs[\"my-tree\"].findNode(parentNodeId);\r\n        const nodeIndex =\r\n          parentNode.nodes.findIndex((x) => x.id !== node.id) - 1;\r\n        parentNode.nodes.splice(nodeIndex, 1);\r\n      }\r\n      console.log(\"example: remove node\", node.id);\r\n    },\r\n    addNodeFunction: function (node) {\r\n      const newNode = {\r\n        text: \"Grandchild 2\",\r\n        id: Math.floor(Math.random() * 100),\r\n        state: { checked: false, selected: false, expanded: false },\r\n      };\r\n      console.log(\"example: add node\", newNode);\r\n      if (node.nodes === undefined) {\r\n        node.nodes = [newNode];\r\n      } else {\r\n        node.nodes.push(newNode);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}