{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nlet timer; // for holding timer function for auto logout if session expire\n\nimport axios, { Axios } from \"axios\";\nexport default {\n  async login(context, payload) {\n    return context.dispatch(\"auth\", { ...payload\n    });\n  },\n\n  async auth(context, payload) {\n    //const token = context.rootGetters.token; //User token !!\n    const baseUrl = localStorage.getItem(\"_rootRestUrl\");\n    /* const response = await fetch(baseUrl + \"rest/Authenthication/Login\", {\r\n       method: \"POST\",\r\n       headers: {\r\n         \r\n       },\r\n       body: JSON.stringify({\r\n         username: payload.username,\r\n         password: payload.password,\r\n       }),\r\n     });*/\n\n    const config = {\n      headers: {\n        \"Content-Type\": 'application/json'\n      }\n    };\n    const json = JSON.stringify({\n      username: payload.username,\n      password: payload.password\n    });\n    const response = await axios.post(baseUrl + 'rest/Authenthication/Login', json, config);\n    this.availabilityMessage = response.data.message;\n    alert(response.status);\n    const responseData = await response.json();\n\n    if (!response.ok) {\n      // console.log(responseData);\n      const error = new Error(responseData.message || \"Failed to authenticate.\");\n      throw error;\n    } //expecting in json recive 'exipresIn' in minutes! how long will session exists\n\n\n    const expiresIn = 60 * 1000 * 60; //auto logout if token expires\n\n    timer = setTimeout(function () {\n      context.dispatch(\"autoLogout\");\n    }, expiresIn); //store login details in local storeage so that on refresh page app remember loged user!\n\n    localStorage.setItem(\"token\", responseData.key);\n    localStorage.setItem(\"userId\", responseData.userId);\n    localStorage.setItem(\"tokenExpiration\", responseData.validUntil); //data needed from login json:\n    //localStorage.setItem('userFullname',payload.username);\n\n    localStorage.setItem(\"expiresIn\", expiresIn);\n    context.commit(\"setUser\", {\n      token: responseData.key,\n      userId: responseData.userId,\n      userFullname: \"Full name\"\n    });\n  },\n\n  logout(context) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"userFullname\");\n    localStorage.removeItem(\"tokenExpiration\");\n    localStorage.removeItem(\"expiresIn\");\n    clearTimeout(timer);\n    context.commit(\"setUser\", {\n      token: null,\n      userId: null,\n      userFullname: null,\n      tokenExpiration: null\n    });\n  },\n\n  //try to login if local storage containt login details\n  autoLogin(context) {\n    const token = localStorage.getItem(\"token\");\n    const userId = localStorage.getItem(\"userId\");\n    const userFullname = localStorage.getItem(\"userFullname\");\n    const tokenExpiration = localStorage.getItem(\"tokenExpiration\");\n    const willExpire = +tokenExpiration - new Date().getTime();\n    const expiresIn = localStorage.getItem(\"expiresIn\");\n\n    if (willExpire < 0) {\n      //if token expires do nothing\n      return;\n    } //if is token ok then we must extend life of the token for the next expiration time\n\n\n    const expirationDate = new Date().getTime() + expiresIn;\n    localStorage.setItem(\"tokenExpiration\", expirationDate); //set new timer\n\n    timer = setTimeout(function () {\n      context.dispatch(\"autoLogout\");\n    }, expiresIn); //login \"again\" this user\n\n    if (token && userId && userFullname) {\n      context.commit(\"setUser\", {\n        token: token,\n        userId: userId,\n        userFullname: userFullname\n      });\n    }\n  },\n\n  autoLogout(context) {\n    context.dispatch(\"logout\");\n    context.commit(\"setAutoLogout\");\n  }\n\n};","map":{"version":3,"names":["timer","axios","Axios","login","context","payload","dispatch","auth","baseUrl","localStorage","getItem","config","headers","json","JSON","stringify","username","password","response","post","availabilityMessage","data","message","alert","status","responseData","ok","error","Error","expiresIn","setTimeout","setItem","key","userId","validUntil","commit","token","userFullname","logout","removeItem","clearTimeout","tokenExpiration","autoLogin","willExpire","Date","getTime","expirationDate","autoLogout"],"sources":["Q:/Projects/DFM v2/src/store/modules/auth/actions.js"],"sourcesContent":["let timer; // for holding timer function for auto logout if session expire\r\n\r\nimport axios, { Axios } from \"axios\";\r\n\r\nexport default {\r\n  async login(context, payload) {\r\n    return context.dispatch(\"auth\", {\r\n      ...payload,\r\n    });\r\n  },\r\n\r\n  async auth(context, payload) {\r\n    //const token = context.rootGetters.token; //User token !!\r\n\r\n    const baseUrl = localStorage.getItem(\"_rootRestUrl\");\r\n\r\n   /* const response = await fetch(baseUrl + \"rest/Authenthication/Login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \r\n      },\r\n      body: JSON.stringify({\r\n        username: payload.username,\r\n        password: payload.password,\r\n      }),\r\n    });*/\r\n    const  config = {\r\n        headers: {\r\n            \"Content-Type\": 'application/json',\r\n        }\r\n    }\r\n\r\n    const json = JSON.stringify({\r\n        username: payload.username,\r\n        password: payload.password,\r\n      })\r\n\r\n\r\n    const response =  await axios.post(baseUrl + 'rest/Authenthication/Login', json, config)\r\n      this.availabilityMessage = response.data.message;\r\n\r\n    alert(response.status);\r\n\r\n    const responseData = await response.json();\r\n\r\n    if (!response.ok) {\r\n      // console.log(responseData);\r\n      const error = new Error(\r\n        responseData.message || \"Failed to authenticate.\"\r\n      );\r\n      throw error;\r\n    }\r\n\r\n    //expecting in json recive 'exipresIn' in minutes! how long will session exists\r\n    const expiresIn = 60 * 1000 * 60;\r\n\r\n    //auto logout if token expires\r\n    timer = setTimeout(function () {\r\n      context.dispatch(\"autoLogout\");\r\n    }, expiresIn);\r\n\r\n    //store login details in local storeage so that on refresh page app remember loged user!\r\n\r\n    localStorage.setItem(\"token\", responseData.key);\r\n    localStorage.setItem(\"userId\", responseData.userId);\r\n    localStorage.setItem(\"tokenExpiration\", responseData.validUntil);\r\n\r\n    //data needed from login json:\r\n\r\n    //localStorage.setItem('userFullname',payload.username);\r\n\r\n    localStorage.setItem(\"expiresIn\", expiresIn);\r\n\r\n    context.commit(\"setUser\", {\r\n      token: responseData.key,\r\n      userId: responseData.userId,\r\n      userFullname: \"Full name\",\r\n    });\r\n  },\r\n\r\n  logout(context) {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"userId\");\r\n    localStorage.removeItem(\"userFullname\");\r\n    localStorage.removeItem(\"tokenExpiration\");\r\n    localStorage.removeItem(\"expiresIn\");\r\n\r\n    clearTimeout(timer);\r\n\r\n    context.commit(\"setUser\", {\r\n      token: null,\r\n      userId: null,\r\n      userFullname: null,\r\n      tokenExpiration: null,\r\n    });\r\n  },\r\n\r\n  //try to login if local storage containt login details\r\n  autoLogin(context) {\r\n    const token = localStorage.getItem(\"token\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const userFullname = localStorage.getItem(\"userFullname\");\r\n    const tokenExpiration = localStorage.getItem(\"tokenExpiration\");\r\n    const willExpire = +tokenExpiration - new Date().getTime();\r\n    const expiresIn = localStorage.getItem(\"expiresIn\");\r\n\r\n    if (willExpire < 0) {\r\n      //if token expires do nothing\r\n      return;\r\n    }\r\n\r\n    //if is token ok then we must extend life of the token for the next expiration time\r\n\r\n    const expirationDate = new Date().getTime() + expiresIn;\r\n    localStorage.setItem(\"tokenExpiration\", expirationDate);\r\n\r\n    //set new timer\r\n    timer = setTimeout(function () {\r\n      context.dispatch(\"autoLogout\");\r\n    }, expiresIn);\r\n\r\n    //login \"again\" this user\r\n    if (token && userId && userFullname) {\r\n      context.commit(\"setUser\", {\r\n        token: token,\r\n        userId: userId,\r\n        userFullname: userFullname,\r\n      });\r\n    }\r\n  },\r\n  autoLogout(context) {\r\n    context.dispatch(\"logout\");\r\n    context.commit(\"setAutoLogout\");\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}